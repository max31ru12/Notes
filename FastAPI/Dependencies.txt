from fastapi import Depends


# Когда прописываем зависимоть Depends(commpon_parameters), то зависимая функция дополнительно 
# принимает параметры функции, от которой она зависит

async def common_parameters(q: str | None = None, skip: int = 0, limit: int = 100):
    return {"q": q, "skip": skip, "limit": limit}


# можно сделать так CommonsDep = Annotated[dict, Depends(common_parameters)]
# и прокидывать эту штуку в аннотацию параметра


# Эта функция должна принимать в commons те параметры, которые принимает
# функция common_parameters
@app.get("/items/")
async def read_items(commons: Annotated[dict, Depends(common_parameters)]):
    return commons


@app.get("/users/")
async def read_users(commons: Annotated[dict, Depends(common_parameters)]):
    return commons

	
	СПИСОК ЗАВИСИМОСТЕЙ
@app.get("/", dependecies=[Depends(dep_1), Depends(dep_2), ...])
async def ....

# такой метод не позвояет достать из зависимости возвращаемое значение

# валидация в зависимостях:
async def verify_token(x_token: Annotated[str, Header()]):
    if x_token != "fake-super-secret-token":
        raise HTTPException(status_code=400, detail="X-Token header invalid")


	ГЛОБАЛЬНЫЕ ЗАВИСИМОСТИ

app = FastAPI(dependencies=[Depends(verify_token), Depends(verify_key)])



	МОЖНО ИСПОЛЬЗОВАТЬ КЛАССЫ

# Annotation
commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]

# Зависимость в FastAPI должна быть callable-объектом, поэтому можно использовать классы
class CommonQueryParams:
    def __init__(self, q: str | None = None, skip: int = 0, limit: int = 100):
        self.q = q
        self.skip = skip
        self.limit = limit


@app.get("/items/")
async def read_items(commons: Annotated[CommonQueryParams, Depends(CommonQueryParams)]):









