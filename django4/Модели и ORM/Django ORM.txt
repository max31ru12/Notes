Получаем количество записей из модели article, связанных с каждой записью из модели category

article_category - имя, указанное в related_name
если не указывать related_name, то в Count() передает article_set

Category.objects.annotate(article_count=Count('article_category'))

annotate() - допобавляет поле к таблице, принимает в **kwargs имя поля и значение


		ФИЛЬТРЫ
Model.objects.filter(created_lt = now()) - поле created меньше, чем now()
Model.objects.filter(created_gt = now()) - поле created больше, чем now()

# Фильтр с несколькими условиями (|, &)
filter(Q(products__pk__gte=1) & Q(producttorecipe__weight__lt=10)) 

# Фильтр на уникальные значения
Model.objects.filter(...).distinct() 

		ОПТИМИЗАЦИЯ ЗАПРОСОВ

			ONLY
product = Model.objects.all().only('field_1', 'field_2', field_3) - выбирает только 3 (4, еще id) поля в запроме

# .only() - по стандарту берется id (можно его не писать) и все значения, указанные в only()
# однако остальные значения тоже доступны (например, product.field_4), они подгружаются только тогда
# когда мы их используем (однако, это !!!! ДОПОЛНИТЕЛЬНЫЕ ЗАПРОСЫ !!!!)
# query = SELECT id, field_1, field_2, field_3 FROM Model;


			VALUES
			VALUES_LIST (вместо сдоварей кортежи)
product = Model.objects.all().values('field_1', 'field_2', 'field_3')
	  Model.objects.all().values_list(...) - список кортежей [('field_1', 'field_2', 'field_3'), ()]
	  Model.objects.all().valies_list(field_1, flat=True) - список значений ['field_1', 'field_1', 'field_1']

# выбирает записи и только те их поля, которые указаны в .values().
# помещает всё в QuerySet в виде словарей: QuerySet [{'filed_1': value,'filed_2': value,'filed_3': value}, {...}  и тд]
# это очень сильно экономит память
# query = SELECT field_1, field_2, field_3 FROM Model;


			COUNT, EXISTS
Model.objects.all().count()
Model.objects.filter().count()
Model.objects.filter().exists()

# query = SELECT COUNT(*) FROM Model;


			SELECT_RELATED
# Есть две модели Product и ProductType:

class Product(models.Model):
    title = models.CharField(...)

class ProductType(model.Model):
    product = models.ForeignKey(to=Product, on_delete=models.CASCADE)

# Для того, чтобы сделать INNER JOIN, необходимо сделать примерно такую запись:

ProductType.objects.all().select_related('product')
# 'product' - имя поля с foreign key

# Такая запись будет выполнять дополнительно N SQL-запросов (N - кол-во записей в ProducType)
for product_type in ProductType.objects.all():
    print(product_type.product.title)


# Такая запись выполнить всего один SQL-запрос
for product_type in ProductType.objects.all().select_related('product'):
    print(product_type.product.title)

# Также можно выбирать, какие поля закинуть в JOIN с помощью:
- .only()
- .values()

ProductType.objects.all().select_related('product').only(product__title)
ProductType.objects.all().select_related('product').values(product__title) ---- тут словарь на выходе
# Фильты only и values делаются к модели ProducTypes, поэтому необходимо указывать так: product__title




		ИСПОЛЬЗОВАНИЕ PREFETCH_RELATED

class Product(models.Model):
    name = models.CharField(max_length=256)
    usage_count = models.IntegerField(default=0)

class Dish(models.Model):
    name = models.CharField(max_length=256)
    products = models.ManyToManyField(Product)

#### ВЫБРАТЬ ОДНУ МОДЕЛЬ И СВЯЗАННЫЕ С НЕЙ МОДЕЛИ:
     recipe = Recipe.objects.prefetch_related('products').get(id=recipe_id)
#### СНАЧАЛА ПРИМЕНЯЕМ prefetch_related, а затем get(...)


context['dishes'] = Dish.objects.all().prefetch_related('products')
    for dish in context['dishes']:
        for prod in dish.products.all():
            print(prod)




		ПОЛУЧЕНИЕ МОДЕЛЕЙ ВО ВЬЮ
# Ищет модель по полям recipe и product. Если модели нет, то создаёт модель с указанными параметрами и дополнительно
# с полями и значениями из defaults (defaults нужен для того, чтобы отделить, например, поле weight от полей для поиска)

recipe_product, created = Model.objects.get_or_create(
    recipe=recipe,
    product=product,
    defaults={'weight': weight}
)









